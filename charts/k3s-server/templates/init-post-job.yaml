apiVersion: v1
kind: ServiceAccount
metadata:
  name: "init-{{ include "k3s-server.fullname" . }}"
  labels:
    {{- include "k3s-server.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "k3s-server.fullname" . }}-secret-manager
  labels:
    {{- include "k3s-server.labels" . | nindent 4 }}
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - create
      - get
      - update
      - patch
      - delete
  - apiGroups:
      - ''
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - ''
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "k3s-server.fullname" . }}-secret-manager-binding
  labels:
    {{- include "k3s-server.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "k3s-server.fullname" . }}-secret-manager
subjects:
  - kind: ServiceAccount
    name: "init-{{ include "k3s-server.fullname" . }}"
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "k3s-server.fullname" . }}-post-start-job"
  labels:
    {{- include "k3s-server.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  ttlSecondsAfterFinished: 10
  template:
    metadata:
      labels:
        {{- include "k3s-server.labels" . | nindent 8 }}
    spec:
      containers:
        - name: generate-key
          image: headscale/headscale:stable-debug
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |-
              headscale generate private-key > /tmp/noise_private.key
          volumeMounts:
            - name: tmp-storage
              mountPath: /tmp
            - name: headscale-configs
              mountPath: /etc/headscale
        - name: create-secret-noise-private-and-k3s
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              until [ -f /tmp/noise_private.key ]; do
                echo "wait /tmp/noise_private.key"
                sleep 2
              done
              kubectl create -n {{ .Release.Namespace }} secret generic "headscale-noise-private-{{ include "k3s-server.fullname" . }}" --from-file=noise_private.key=/tmp/noise_private.key --dry-run=client -o yaml | kubectl apply -f -
              kubectl rollout status deployment/{{ include "k3s-server.fullname" . }}
              sleep 60
              kubectl exec -it -n {{ .Release.Namespace }} deploy/{{ include "k3s-server.fullname" . }} -c k3s -- k3s token create --ttl 0 > /tmp/k3s-token
              kubectl create -n {{ .Release.Namespace }} secret generic "k3s-token-{{ include "k3s-server.fullname" . }}" --from-file=token=/tmp/k3s-token --dry-run=client -o yaml | kubectl apply -f -
          volumeMounts:
            - name: headscale-configs
              mountPath: /etc/headscale
            - name: tmp-storage
              mountPath: /tmp
        - name: create-database-hs
          image: postgres:alpine
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              export DSN='{{ $.Values.hs.database.type }}://{{ $.Values.hs.database.username }}:{{ $.Values.hs.database.password }}@{{ $.Values.hs.database.hostname }}:{{ $.Values.hs.database.port }}?{{ $.Values.hs.database.query }}'
              psql $DSN -c "CREATE DATABASE {{ include "k3s-server.sanitizeNameHeadscale" . }};"
        - name: create-database-k3s
          image: {{ $.Values.k3s.database.image }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              export DSN='{{ $.Values.k3s.database.type }}://{{ $.Values.k3s.database.username }}:{{ $.Values.k3s.database.password }}@{{ $.Values.k3s.database.hostname }}:{{ $.Values.k3s.database.port }}?{{ $.Values.hs.database.query }}'
              {{ $.Values.k3s.database.cli }} $DSN -c "CREATE DATABASE {{ include "k3s-server.sanitizeName" . }};"
        - name: headscale-create-auth
          command: ["sh", "-c"]
          args:
            - |-
              until headscale configtest; do
                echo "wait 'headscale configtest'"
                sleep 5
              done
              headscale serve &
              until nc -zv 0.0.0.0:8080; do
                sleep 2
              done
              headscale users create {{ .Release.Name }}
              token=`headscale preauthkeys create --user {{ .Release.Name }} --reusable  --expiration 100y`
              echo -e "name=tailscale,joinKey=$token,controlServerURL=http://headscale.{{ $.Values.domain }}" > /tmp/headscale_auth_file
              echo -e "$token" > /tmp/token
          image: headscale/headscale:stable-debug
          volumeMounts:
            - name: headscale-configs
              mountPath: /etc/headscale
            - name: tmp-storage
              mountPath: /tmp
            - name: headscale-noise-private
              mountPath: /etc/headscale_secret
        - name: create-secret-auth-file
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              until [ -f /tmp/headscale_auth_file ]; do
                echo "wait /tmp/headscale_auth_file"
                sleep 2
              done
              until [ -f /tmp/token ]; do
                echo "wait /tmp/token"
                sleep 2
              done
              kubectl create -n {{ .Release.Namespace }} secret generic "headscale-auth-file-{{ include "k3s-server.fullname" . }}" --from-file=headscale_auth_file=/tmp/headscale_auth_file --dry-run=client -o yaml | kubectl apply -f -
              kubectl create -n {{ .Release.Namespace }} secret generic "headscale-token-{{ include "k3s-server.fullname" . }}" --from-file=token=/tmp/token --dry-run=client -o yaml | kubectl apply -f -
          volumeMounts:
            - name: headscale-configs
              mountPath: /etc/headscale
            - name: tmp-storage
              mountPath: /tmp
      volumes:
        - name: tmp-storage
          emptyDir: {}
        - name: headscale-configs
          configMap:
            name: "headscale-{{ include "k3s-server.fullname" . }}"
        - name: headscale-noise-private
          secret:
            secretName: "headscale-noise-private-{{ include "k3s-server.fullname" . }}"
        - name: headscale-auth-file
          secret:
            secretName: "headscale-auth-file-{{ include "k3s-server.fullname" . }}"
        - name: headscale-token
          secret:
            secretName: "headscale-token-{{ include "k3s-server.fullname" . }}"
        - name: k3s
          secret:
            secretName: "k3s-token-{{ include "k3s-server.fullname" . }}"
      restartPolicy: OnFailure
      serviceAccount: "init-{{ include "k3s-server.fullname" . }}"
      serviceAccountName: "init-{{ include "k3s-server.fullname" . }}"